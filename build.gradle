plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'com.perforce'
version = project.hasProperty('ver') ? project.ext.ver : 'PREP-TEST_ONLY'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://artifactory.bnr.perforce.com:8443/artifactory/snapshots/" }
}

dependencies {
    api 'com.jcraft:jzlib:1.1.3'
    api 'org.apache.commons:commons-lang3:3.12.0'
    api 'commons-codec:commons-codec:1.15'
    api 'commons-io:commons-io:2.11.0'
    api 'com.google.code.findbugs:jsr305:3.0.2'

    testImplementation 'org.slf4j:slf4j-api:1.7.36'
    testImplementation 'org.slf4j:slf4j-simple:1.7.36'
    testImplementation 'org.apache.commons:commons-exec:1.3'
    testImplementation 'org.apache.commons:commons-compress:1.21'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.7.12'
    testImplementation 'com.googlecode.java-diff-utils:diffutils:1.3.0'
}

jar {
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForMavenJavaPublication }
        rename ".*", "pom.xml"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Perforce Java API'
                description = 'P4Java, the Perforce Java API is a Java-native API for accessing Perforce SCM services from within Java'
                url = 'https://github.com/perforce/p4java'
                organization {
                    name = 'Perforce Software'
                    url = 'http://www.perforce.com'
                }
                licenses {
                    license {
                        name = 'Perforce Software'
                        url = 'https://www.perforce.com/perforce/doc.current/user/p4java_eula.txt'
                    }
                }
                developers {
                    developer {
                        id = 'p4java'
                        name = 'Perforce Software'
                        email = 'support+java@perforce.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/perforce/p4java.git'
                    developerConnection = 'scm:git:https://github.com/perforce/p4java.git'
                    url = 'https://github.com/perforce/p4java'
                }
            }
        }
    }

    repositories {
        def mavenUser = project.hasProperty('mavenUser') ? project.ext.mavenUser : ''
        def mavenPassword = project.hasProperty('mavenPassword') ? project.ext.mavenPassword : ''

        maven {
            name = 'p4mavencentral-staging'
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = mavenUser
                password = mavenPassword
            }
        }
        maven {
            name = 'artifactory-snapshots'
            url = 'https://artifactory.bnr.perforce.com:8443/artifactory/snapshots/'
            credentials {
                username = mavenUser
                password = mavenPassword
            }
        }
        maven {
            name = 'artifactory-release'
            url = 'https://artifactory.bnr.perforce.com:8443/artifactory/releases/'
            credentials {
                username = mavenUser
                password = mavenPassword
            }
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

tasks.withType(Javadoc) {
    (options as StandardJavadocDocletOptions).addStringOption("Xmaxwarns", "500")
    (options as StandardJavadocDocletOptions).addStringOption("Xmaxerrs", "500")
}

// Report lint check details
tasks.withType(JavaCompile) {
    options.compilerArgs.add("-Xlint:deprecation")
    options.compilerArgs.add("-Xlint:unchecked")
}

signing {
    sign publishing.publications
}